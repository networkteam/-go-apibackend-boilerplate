.backend-job:
  extends: .component-job
  variables:
    COMPONENT: backend
    # Adjust GOPATH to enable caching of downloaded modules
    GOPATH: "$CI_PROJECT_DIR/.cache/go"
    # The Go image to use
    GOLANG_IMAGE: golang:1.22
  before_script:
    - !reference [.docker-build-default, before_script]
    - cd backend
  cache:
    key: "golang"
    paths:
      - .cache/go

backend:build:
  extends: .backend-job
  stage: build
  needs: []
  dependencies: []
  image: $GOLANG_IMAGE
  script:
    - CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build -a -installsuffix cgo -o bin/myproject-ctl ./cli/ctl
  artifacts:
    paths:
      - backend/bin

backend:test:
  extends: .backend-job
  stage: test
  needs: []
  dependencies: []
  image: $GOLANG_IMAGE
  services:
    - postgres:13.6
  variables:
    TZ: Europe/Berlin
    POSTGRES_DB: myproject-test
    POSTGRES_USER: root
    POSTGRES_PASSWORD: ""
    POSTGRES_HOST_AUTH_METHOD: trust
  script:
    - go mod download
    - go run ./cli/ctl test preparedb
    - go run gotest.tools/gotestsum --junitfile junit-backend.xml
    - go test ./... -coverprofile=coverage.out -covermode atomic -coverpkg $(go list ./... | tr "\n" ",")
  artifacts:
    paths:
      - backend/coverage.out
    reports:
      junit: backend/junit-*.xml
    when: always

backend:lint:
  extends: .backend-job
  stage: test
  needs: []
  dependencies: []
  image: registry.networkteam.com/networkteam/docker/golangci-lint:1.55.2
  script:
    - cd backend
    # Write the code coverage report to gl-code-quality-report.json
    # and print linting issues to stdout in the format: path/to/file:line description.
    - golangci-lint run --out-format code-climate | tee gl-code-quality-report.json | jq -r '.[] | "\(.severity)\t\(.location.path):\(.location.lines.begin) \(.description)"'
    # Fail if any issue with severity "blocker" is found
    - test -z "$(jq -r '.[] | select(.severity == "blocker") | .description' gl-code-quality-report.json)"
  artifacts:
    reports:
      codequality: backend/gl-code-quality-report.json
    paths:
      - backend/gl-code-quality-report.json
  interruptible: true

backend:gosec-sast:
  extends: .backend-job
  stage: test
  needs: []
  dependencies: []
  variables:
    ANALYZER_TARGET_DIR: $CI_PROJECT_DIR/backend
    SAST_EXCLUDED_PATHS: test
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 3
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/gosec:$SAST_ANALYZER_IMAGE_TAG"
  image:
    name: "$SAST_ANALYZER_IMAGE"
  script:
    - "/analyzer run"
  allow_failure: true
  artifacts:
    reports:
      sast:
        - backend/gl-sast-report.json

backend:semgrep-sast:
  extends: .backend-job
  stage: test
  needs: []
  dependencies: []
  variables:
    ANALYZER_TARGET_DIR: $CI_PROJECT_DIR/backend
    SAST_EXCLUDED_PATHS: test
    SEARCH_MAX_DEPTH: 4
    SAST_ANALYZER_IMAGE_TAG: 2
    SAST_ANALYZER_IMAGE: "$SECURE_ANALYZERS_PREFIX/semgrep:$SAST_ANALYZER_IMAGE_TAG"
  image:
    name: "$SAST_ANALYZER_IMAGE"
  script:
    - "/analyzer run"
  allow_failure: true
  artifacts:
    reports:
      sast:
        - backend/gl-sast-report.json

# Build docker image for backend
backend:docker:
  extends:
    - .backend-job
    - .docker-build
  stage: docker-build
  needs:
    - backend:build
  dependencies:
    - backend:build
  variables:
    PROJECT_COMPONENT: backend

# Copy the latest docker image for component if no changes occurred
backend:copy-docker:
  extends: .component-dockercopy-job
  variables:
    COMPONENT: backend
