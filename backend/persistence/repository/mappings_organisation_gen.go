// Code generated by construct, DO NOT EDIT.
package repository

import (
	"database/sql"
	"encoding/json"
	uuid "github.com/gofrs/uuid"
	construct "github.com/networkteam/construct"
	cjson "github.com/networkteam/construct/json"
	domain "myvendor.mytld/myproject/backend/domain"
)

const (
	organisation_id        = "organisations.organisation_id"
	organisation_name      = "organisations.name"
	organisation_createdAt = "organisations.created_at"
	organisation_updatedAt = "organisations.updated_at"
)

var organisationSortFields = map[string]string{
	"createdat": organisation_createdAt,
	"name":      organisation_name,
	"updatedat": organisation_updatedAt,
}

type OrganisationChangeSet struct {
	ID   *uuid.UUID
	Name *string
}

func (c OrganisationChangeSet) toMap() map[string]interface{} {
	m := make(map[string]interface{})
	if c.ID != nil {
		m["organisation_id"] = *c.ID
	}
	if c.Name != nil {
		m["name"] = *c.Name
	}
	return m
}

func OrganisationToChangeSet(r domain.Organisation) (c OrganisationChangeSet) {
	if r.ID != uuid.Nil {
		c.ID = &r.ID
	}
	c.Name = &r.Name
	return
}

var organisationDefaultSelectJson = cjson.JsonBuildObject().
	Set("ID", cjson.Exp("organisations.organisation_id")).
	Set("Name", cjson.Exp("organisations.name")).
	Set("CreatedAt", cjson.Exp("organisations.created_at")).
	Set("UpdatedAt", cjson.Exp("organisations.updated_at"))

func organisationScanJsonRow(row construct.RowScanner) (result domain.Organisation, err error) {
	var data []byte
	if err := row.Scan(&data); err != nil {
		if err == sql.ErrNoRows {
			return result, construct.ErrNotFound
		}
		return result, err
	}
	return result, json.Unmarshal(data, &result)
}
