// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package model

import (
	"time"

	"github.com/gofrs/uuid"
	"myvendor.mytld/myproject/backend/domain"
)

type Account struct {
	ID             uuid.UUID   `json:"id"`
	EmailAddress   string      `json:"emailAddress"`
	Role           domain.Role `json:"role"`
	LastLogin      *time.Time  `json:"lastLogin"`
	OrganisationID *uuid.UUID  `json:"organisationId"`
	CreatedAt      time.Time   `json:"createdAt"`
	UpdatedAt      time.Time   `json:"updatedAt"`
}

type AccountFilter struct {
	// Filter by multiple ids for fetching references
	Ids []uuid.UUID `json:"ids"`
	// Filter by a query string on all text fields
	Q *string `json:"q"`
	// Filter by organisation id
	OrganisationID *uuid.UUID `json:"organisationId"`
}

// A generic application error (for expected errors)
type Error struct {
	// An error code that can be translated in the client
	Code string `json:"code"`
	// Arguments for translation of the code
	Arguments []string `json:"arguments"`
}

// A generic field based error
type FieldError struct {
	// A path to the field where the error occured, empty array if the error is not bound to a specific field
	Path []string `json:"path"`
	// An error code that can be translated in the client
	Code string `json:"code"`
	// Arguments for translation of the code
	Arguments []string `json:"arguments"`
}

// An error with information about fields
type FieldsError struct {
	// List of errors specific to a field (or global)
	Errors []*FieldError `json:"errors"`
}

type ListMetadata struct {
	Count int `json:"count"`
}

// Login credentials for accounts
type LoginCredentials struct {
	// Email address of the account
	EmailAddress string `json:"emailAddress"`
	// Password of the account
	Password string `json:"password"`
}

// Login result
type LoginResult struct {
	// The authenticated account (if error is null)
	Account *Account `json:"account"`
	// Auth token for using header based authentication (if error is null)
	AuthToken string `json:"authToken"`
	// CSRF token to be sent in subsequent requests (if error is null)
	CsrfToken string `json:"csrfToken"`
	// An error if authentication failed
	Error *Error `json:"error"`
}

type Organisation struct {
	ID        uuid.UUID `json:"id"`
	Name      string    `json:"name"`
	CreatedAt time.Time `json:"createdAt"`
	UpdatedAt time.Time `json:"updatedAt"`
}

type OrganisationFilter struct {
	// Filter by multiple ids for fetching references
	Ids []uuid.UUID `json:"ids"`
	// Filter by a query string on all text fields
	Q *string `json:"q"`
}

type Result struct {
	// An error if the operation failed
	Error *FieldsError `json:"error"`
}
