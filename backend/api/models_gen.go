// Code generated by github.com/99designs/gqlgen, DO NOT EDIT.

package api

import (
	"github.com/gofrs/uuid"
)

// A request token for an app account
type AppAccountRequestToken struct {
	// Id of the app account request token
	ID uuid.UUID `json:"id"`
	// Token to be used to connect device
	ConnectToken string `json:"connectToken"`
	// Label of the device to connect
	DeviceLabel string `json:"deviceLabel"`
	// When the token will expire
	Expiry string `json:"expiry"`
}

// Login credentials for app user accounts
type AppUserLoginCredentials struct {
	// Email address of the user account
	EmailAddress string `json:"emailAddress"`
	// Password of the user account
	Password string `json:"password"`
	// A device token
	DeviceToken *string `json:"deviceToken"`
	// The Device OS (IOS or Android)
	DeviceOs *string `json:"deviceOs"`
}

// App user account result
type AppUserLoginResult struct {
	// The authenticated account (if error is null)
	Account *UserAccount `json:"account"`
	// The organisation of the authenticated account (if error is null)
	Organisation *Organisation `json:"organisation"`
	// Auth token to be sent in subsequent requests (if error is null)
	AuthToken string `json:"authToken"`
	// An error if the operation failed
	Error *Error `json:"error"`
}

type CreateAppAccountInput struct {
	// Organisation id of the app account
	OrganisationID uuid.UUID `json:"organisationId"`
	// A label for the device
	DeviceLabel string `json:"deviceLabel"`
	// Role of the app account to create
	Role Role `json:"role"`
}

// Create app account result
type CreateAppAccountResult struct {
	// Id of the created resource (if error is null)
	ID uuid.UUID `json:"id"`
	// Token for connecting the device (if error is null)
	ConnectToken string `json:"connectToken"`
	// An error if creation failed
	Error *FieldsError `json:"error"`
}

type CreateOrganisationInput struct {
	// Name of the organisation to be created (must be unique)
	Name string `json:"name"`
}

// Generic creation result
type CreateResult struct {
	// Id of the created resource (if error is null)
	ID uuid.UUID `json:"id"`
	// An error if creation failed
	Error *FieldsError `json:"error"`
}

type CreateUserAccountInput struct {
	// Organisation id of the new user account (global if empty)
	OrganisationID *uuid.UUID `json:"organisationId"`
	// Email address of the user account to create (must be unique)
	EmailAddress string `json:"emailAddress"`
	// Password of the user account to create (minimum length: 8 characters)
	Password string `json:"password"`
	// A first name for the user account
	FirstName string `json:"firstName"`
	// A last name for the user account
	LastName string `json:"lastName"`
	// Role of the user account to create
	Role Role `json:"role"`
}

type DeleteAppAccountInput struct {
	ID uuid.UUID `json:"id"`
	// Organisation id of the app account (must match app account)
	OrganisationID uuid.UUID `json:"organisationId"`
}

type DeleteOrganisationInput struct {
	// ID of organisation to delete
	OrganisationID uuid.UUID `json:"organisationId"`
}

type DeleteUserAccountInput struct {
	ID uuid.UUID `json:"id"`
	// Organisation id of the user account (must match user account, or empty for systemadministrator)
	OrganisationID *uuid.UUID `json:"organisationId"`
}

type DisconnectAppAccountInput struct {
	ID uuid.UUID `json:"id"`
	// Organisation id of the app account (must match app account)
	OrganisationID uuid.UUID `json:"organisationId"`
}

// A generic application error (for expected errors)
type Error struct {
	// An error code that can be translated in the client
	Code string `json:"code"`
	// Arguments for translation of the code
	Arguments []string `json:"arguments"`
}

// A generic field based error
type FieldError struct {
	// A path to the field where the error occured, empty array if the error is not bound to a specific field
	Path []string `json:"path"`
	// An error code that can be translated in the client
	Code string `json:"code"`
	// Arguments for translation of the code
	Arguments []string `json:"arguments"`
}

// An error with information about fields
type FieldsError struct {
	// List of errors specific to a field (or global)
	Errors []*FieldError `json:"errors"`
}

// Login credentials for user accounts
type LoginCredentials struct {
	// Email address of the user account
	EmailAddress string `json:"emailAddress"`
	// Password of the user account
	Password string `json:"password"`
}

// Login result
type LoginResult struct {
	// The authenticated account (if error is null)
	Account *UserAccount `json:"account"`
	// The organisation of the authenticated account (global if empty)
	Organisation *Organisation `json:"organisation"`
	// CSRF token to be sent in subsequent requests (if error is null)
	CsrfToken string `json:"csrfToken"`
	// An error if authentication failed
	Error *Error `json:"error"`
}

// An organisation is a client of the system
type Organisation struct {
	ID   uuid.UUID `json:"id"`
	Name string    `json:"name"`
}

// Paged query paramaters
type PagedQueryParameters struct {
	// Optional limit for max number of results
	Limit *int `json:"limit"`
	// Optional result id to always start after the given result (for stable fetch more)
	AfterResultID *uuid.UUID `json:"afterResultId"`
}

type RedeemAppAccountInput struct {
	ConnectToken string `json:"connectToken"`
	// A device token
	DeviceToken *string `json:"deviceToken"`
	// The Device OS (IOS or Android)
	DeviceOs *string `json:"deviceOs"`
}

// Redeem app account result
type RedeemAppAccountResult struct {
	// The authenticated account (if error is null)
	Account *AppAccount `json:"account"`
	// The organisation of the authenticated account (if error is null)
	Organisation *Organisation `json:"organisation"`
	// Auth token to be sent in subsequent requests (if error is null)
	AuthToken string `json:"authToken"`
	// An error if the operation failed
	Error *Error `json:"error"`
}

// Generic result
type Result struct {
	// An error if the operation failed
	Error *FieldsError `json:"error"`
}

type UpdateOrganisationInput struct {
	// Organisation id to update
	ID uuid.UUID `json:"id"`
	// Name of the organisation (must be unique)
	Name string `json:"name"`
}

type UpdateUserAccountInput struct {
	// User account id to update
	ID uuid.UUID `json:"id"`
	// Organisation id of the user account (must match user account, empty for system administrator)
	OrganisationID *uuid.UUID `json:"organisationId"`
	// Email address of the user account to create (must be unique)
	EmailAddress string `json:"emailAddress"`
	// Password of the user account (minimum length: 8 characters), omit to keep existing password
	Password *string `json:"password"`
	// A first name for the user account
	FirstName string `json:"firstName"`
	// A last name for the user account
	LastName string `json:"lastName"`
	// Role of the user account
	Role Role `json:"role"`
}
